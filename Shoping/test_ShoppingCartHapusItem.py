# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=hapus_item_ba34e340e6
ROOST_METHOD_SIG_HASH=hapus_item_3704d929a1


Scenario 1: Test the removal of an existing item
Details:
  TestName: test_remove_existing_item
  Description: This test will verify if the function correctly removes an item from the shopping cart when the item exists in the cart.
Execution:
  Arrange: Initialize a shopping cart object with a list of items.
  Act: Invoke the hapus_item function with the name of an existing item in the cart.
  Assert: Check if the item has been removed from the shopping cart.
Validation:
  This test is crucial as it checks if the function correctly implements the business logic of removing an item from the cart. If the item is not removed, it could lead to incorrect calculations of the total price and other cart-related operations.

Scenario 2: Test the removal of a non-existing item
Details:
  TestName: test_remove_non_existing_item
  Description: This test will verify if the function handles the scenario when the item to be removed does not exist in the shopping cart.
Execution:
  Arrange: Initialize a shopping cart object with a list of items.
  Act: Invoke the hapus_item function with the name of an item that does not exist in the cart.
  Assert: Check if the function handles this scenario gracefully without causing any errors and the state of the shopping cart remains the same.
Validation:
  This test is important because it checks the robustness of the function. A well-designed function should be able to handle edge cases and incorrect inputs gracefully.

Scenario 3: Test the removal of an item from an empty cart
Details:
  TestName: test_remove_item_from_empty_cart
  Description: This test will verify if the function handles the scenario when there are no items in the shopping cart.
Execution:
  Arrange: Initialize a shopping cart object without any items.
  Act: Invoke the hapus_item function with the name of an item.
  Assert: Check if the function handles this scenario gracefully without causing any errors.
Validation:
  This test is critical because it checks the robustness of the function. It should be able to handle edge cases such as an empty cart without causing any errors.

Scenario 4: Test the removal of multiple items with the same name
Details:
  TestName: test_remove_multiple_same_items
  Description: This test will verify if the function correctly removes all items with the same name from the shopping cart.
Execution:
  Arrange: Initialize a shopping cart object with multiple items having the same name.
  Act: Invoke the hapus_item function with the name of the item.
  Assert: Check if all items with the same name have been removed from the shopping cart.
Validation:
  This test is important because it checks if the function correctly implements the business logic of removing all items with the same name. If only one item is removed, it could lead to incorrect calculations of the total price and other cart-related operations.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartHapusItem:

    @pytest.mark.regression
    def test_remove_existing_item(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.tambah_item('Monitor LG 19inch', 1500, 2)
        cart.hapus_item('Laptop Acer')
        for item in cart.keranjang:
            assert item['produk'] != 'Laptop Acer'

    @pytest.mark.regression
    def test_remove_non_existing_item(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Monitor LG 19inch', 1500, 2)
        cart.hapus_item('Laptop Acer')
        assert len(cart.keranjang) == 1

    @pytest.mark.regression
    def test_remove_item_from_empty_cart(self):
        cart = ShoppingCart('Juragan')
        cart.hapus_item('Laptop Acer')
        assert len(cart.keranjang) == 0

    @pytest.mark.regression
    def test_remove_multiple_same_items(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.hapus_item('Laptop Acer')
        for item in cart.keranjang:
            assert item['produk'] != 'Laptop Acer'
