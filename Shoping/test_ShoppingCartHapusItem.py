# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=hapus_item_ba34e340e6
ROOST_METHOD_SIG_HASH=hapus_item_3704d929a1


```
Scenario 1: Testing the removal of an existing item from the cart
Details:
  TestName: test_remove_existing_item
  Description: This test verifies that the function hapus_item correctly removes an existing item from the shopping cart.
Execution:
  Arrange: An instance of the ShoppingCart class is created with a certain nama_pembeli and the keranjang is populated with a list of belanjaan. 
  Act: The hapus_item function is invoked with the name of an existing product in the keranjang.
  Assert: The keranjang is checked to ensure that the product has been removed.
Validation:
  This test is crucial to ensure that the hapus_item function behaves as expected when it is required to remove an existing product from the shopping cart. This is a fundamental functionality of a shopping cart system and must be verified to be working correctly.

Scenario 2: Testing the removal of a non-existing item from the cart
Details:
  TestName: test_remove_non_existing_item
  Description: This test verifies the behavior of the hapus_item function when it is required to remove a non-existing product from the shopping cart. 
Execution:
  Arrange: An instance of the ShoppingCart class is created with a certain nama_pembeli and the keranjang is populated with a list of belanjaan. 
  Act: The hapus_item function is invoked with the name of a product that does not exist in the keranjang.
  Assert: The keranjang is checked to ensure that no changes have been made.
Validation:
  This test is important to ensure that the hapus_item function handles the scenario of a non-existing product gracefully, without causing any unexpected changes to the keranjang.

Scenario 3: Testing the removal of a product from an empty cart
Details:
  TestName: test_remove_item_from_empty_cart
  Description: This test verifies the behavior of the hapus_item function when it is required to remove a product from an empty shopping cart.
Execution:
  Arrange: An instance of the ShoppingCart class is created with a certain nama_pembeli and the keranjang is left empty.
  Act: The hapus_item function is invoked with the name of a product.
  Assert: No changes are made to the keranjang and no exceptions are thrown.
Validation:
  This test is important to ensure that the hapus_item function handles the scenario of an empty cart gracefully, without causing any unexpected changes to the keranjang or throwing any exceptions.
```
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartHapusItem:
    @pytest.mark.regression
    def test_remove_existing_item(self):
        # Arrange
        my_cart = ShoppingCart("John")
        my_cart.tambah_item("Laptop Acer", 1200, 2)
        my_cart.tambah_item("Monitor LG 19inch", 1500, 2)

        # Act
        my_cart.hapus_item("Laptop Acer")

        # Assert
        assert "Laptop Acer" not in [item["produk"] for item in my_cart.keranjang]

    @pytest.mark.regression
    def test_remove_non_existing_item(self):
        # Arrange
        my_cart = ShoppingCart("John")
        my_cart.tambah_item("Laptop Acer", 1200, 2)
        my_cart.tambah_item("Monitor LG 19inch", 1500, 2)

        # Act
        my_cart.hapus_item("Laptop Asus")

        # Assert
        assert len(my_cart.keranjang) == 2

    @pytest.mark.regression
    def test_remove_item_from_empty_cart(self):
        # Arrange
        my_cart = ShoppingCart("John")

        # Act
        my_cart.hapus_item("Laptop Acer")

        # Assert
        assert len(my_cart.keranjang) == 0
