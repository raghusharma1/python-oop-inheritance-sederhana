# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=hapus_item_ba34e340e6
ROOST_METHOD_SIG_HASH=hapus_item_3704d929a1


Scenario 1: Removing an existing product from the shopping cart
Details:
  TestName: test_remove_existing_product
  Description: This test verifies that if an existing product is passed to the hapus_item function, it is successfully removed from the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a name and add a product to the shopping cart.
  Act: Invoke the hapus_item function, passing the name of the existing product.
  Assert: Check that the product is no longer in the shopping cart.
Validation:
  This test is important to ensure that the hapus_item function can successfully remove an existing item from the shopping cart, which is a key functionality for a shopping cart system.

Scenario 2: Attempting to remove a non-existing product from the shopping cart
Details:
  TestName: test_remove_non_existing_product
  Description: This test verifies that if a non-existing product is passed to the hapus_item function, the shopping cart remains unchanged.
Execution:
  Arrange: Initialize a ShoppingCart object with a name and add a product to the shopping cart.
  Act: Invoke the hapus_item function, passing the name of a product that does not exist in the shopping cart.
  Assert: Check that the shopping cart remains unchanged.
Validation:
  This test is important to ensure that the hapus_item function does not remove any item from the shopping cart when passed a non-existing product name, which is expected behavior for a shopping cart system.

Scenario 3: Removing a product from an empty shopping cart
Details:
  TestName: test_remove_product_from_empty_cart
  Description: This test verifies that if a product is passed to the hapus_item function when the shopping cart is empty, the shopping cart remains empty.
Execution:
  Arrange: Initialize a ShoppingCart object with a name, ensuring the shopping cart is empty.
  Act: Invoke the hapus_item function, passing the name of a product.
  Assert: Check that the shopping cart remains empty.
Validation:
  This test is important to ensure that the hapus_item function does not alter the shopping cart when it is empty, which is expected behavior for a shopping cart system.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartHapusItem:
    @pytest.mark.regression
    def test_remove_existing_product(self):
        # Arrange
        cart = ShoppingCart("Juragan")
        cart.tambah_item("Laptop Acer", 1200, 2)

        # Act
        cart.hapus_item("Laptop Acer")

        # Assert
        assert "Laptop Acer" not in [item["produk"] for item in cart.keranjang]

    @pytest.mark.regression
    def test_remove_non_existing_product(self):
        # Arrange
        cart = ShoppingCart("Juragan")
        cart.tambah_item("Monitor LG 19inch", 1500, 2)

        # Act
        cart.hapus_item("Laptop Acer")

        # Assert
        assert len(cart.keranjang) == 1
        assert "Monitor LG 19inch" in [item["produk"] for item in cart.keranjang]

    @pytest.mark.regression
    def test_remove_product_from_empty_cart(self):
        # Arrange
        cart = ShoppingCart("Juragan")

        # Act
        cart.hapus_item("Laptop Acer")

        # Assert
        assert len(cart.keranjang) == 0
