# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=__init___12a141ef6e
ROOST_METHOD_SIG_HASH=__init___a2f985d7bb


```
Scenario 1: Validate the assignment of nama_pembeli in the __init__ method
Details:
  TestName: test_nama_pembeli_assignment
  Description: This test will verify that the __init__ method correctly assigns the provided nama_pembeli to the object.
Execution:
  Arrange: Instantiate a new object of the class, providing a test string value for nama_pembeli.
  Act: No action is required as the __init__ method is called during object instantiation.
  Assert: Check that the nama_pembeli attribute of the object matches the test string provided during instantiation.
Validation:
  This test ensures that the __init__ method correctly assigns the provided nama_pembeli to the object. This is an essential functionality as the nama_pembeli attribute is likely used in other methods within the class.

Scenario 2: Validate that nama_pembeli can handle different types of input
Details:
  TestName: test_nama_pembeli_input_types
  Description: This test will verify that the __init__ method can handle different types of input for nama_pembeli, such as integers, floats, and other non-string types.
Execution:
  Arrange: Instantiate a new object of the class, providing a non-string value for nama_pembeli.
  Act: No action is required as the __init__ method is called during object instantiation.
  Assert: Check that the nama_pembeli attribute of the object matches the non-string value provided during instantiation.
Validation:
  This test ensures that the __init__ method can handle different types of input for nama_pembeli. This is important as it ensures the method is robust and can handle unexpected input types.

Scenario 3: Validate that __init__ method can handle empty input for nama_pembeli
Details:
  TestName: test_empty_nama_pembeli
  Description: This test will verify that the __init__ method can handle an empty input for nama_pembeli.
Execution:
  Arrange: Instantiate a new object of the class, providing an empty string for nama_pembeli.
  Act: No action is required as the __init__ method is called during object instantiation.
  Assert: Check that the nama_pembeli attribute of the object is an empty string.
Validation:
  This test ensures that the __init__ method can handle an empty input for nama_pembeli. This is important as it checks the robustness of the method when faced with unexpected inputs.
```

"""

# ********RoostGPT********
# Required imports
import pytest
from Contoh import ShoppingCart

# Test class
class Test_ShoppingCartInit:

    # Test scenario 1
    def test_nama_pembeli_assignment(self):
        # Arrange
        test_nama_pembeli = "Test Pembeli"
        cart = ShoppingCart(test_nama_pembeli)
        # Assert
        assert cart.nama_pembeli == test_nama_pembeli, "nama_pembeli is not correctly assigned."

    # Test scenario 2
    @pytest.mark.parametrize("nama_pembeli", [123, 12.34, True, ["Test"], {"name": "Test"}])
    def test_nama_pembeli_input_types(self, nama_pembeli):
        # Arrange
        cart = ShoppingCart(nama_pembeli)
        # Assert
        assert cart.nama_pembeli == nama_pembeli, "nama_pembeli cannot handle different input types."

    # Test scenario 3
    def test_empty_nama_pembeli(self):
        # Arrange
        empty_nama_pembeli = ""
        cart = ShoppingCart(empty_nama_pembeli)
        # Assert
        assert cart.nama_pembeli == empty_nama_pembeli, "nama_pembeli cannot handle empty string."
