# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tambah_item_ab3c7163fb
ROOST_METHOD_SIG_HASH=tambah_item_86b63dc9da


Scenario 1: Adding an item to the shopping cart
Details:
  TestName: test_add_item_to_cart
  Description: This test will verify that an item can be added to the shopping cart correctly, including its product name, price, quantity, and total cost.
Execution:
  Arrange: Initialize a ShoppingCart object with a given name.
  Act: Invoke the tambah_item method with a product name, price, and quantity.
  Assert: Check if the added item, along with its details, exists in the shopping cart.
Validation:
  This test is crucial to ensure that the shopping cart can store items with all their details correctly, which is the primary function of a shopping cart in an e-commerce application.

Scenario 2: Adding multiple items to the shopping cart
Details:
  TestName: test_add_multiple_items_to_cart
  Description: This test will verify that multiple items can be added to the shopping cart correctly, each with its product name, price, quantity, and total cost.
Execution:
  Arrange: Initialize a ShoppingCart object with a given name.
  Act: Invoke the tambah_item method multiple times with different product names, prices, and quantities.
  Assert: Check if all the added items, along with their details, exist in the shopping cart.
Validation:
  This test is essential to ensure that the shopping cart can handle multiple items, which is a common scenario in any e-commerce application.

Scenario 3: Adding an item with zero quantity to the shopping cart
Details:
  TestName: test_add_zero_quantity_item_to_cart
  Description: This test will verify that when an item with zero quantity is added to the shopping cart, it should not be added.
Execution:
  Arrange: Initialize a ShoppingCart object with a given name.
  Act: Invoke the tambah_item method with a product name, price, and zero quantity.
  Assert: Check if the shopping cart is still empty.
Validation:
  This test is important to ensure that the shopping cart does not store items with zero quantity, which makes no sense in a shopping scenario and can cause confusion to the user.

Scenario 4: Adding an item with negative price to the shopping cart
Details:
  TestName: test_add_negative_price_item_to_cart
  Description: This test will verify that when an item with a negative price is added to the shopping cart, it should not be added.
Execution:
  Arrange: Initialize a ShoppingCart object with a given name.
  Act: Invoke the tambah_item method with a product name, negative price, and quantity.
  Assert: Check if the shopping cart is still empty.
Validation:
  This test is crucial to ensure that the shopping cart does not store items with negative prices, which are not valid in a shopping scenario and can lead to incorrect calculations.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTambahItem:
    
    @pytest.mark.regression
    def test_add_item_to_cart(self):
        shopping_cart = ShoppingCart("Juragan")
        shopping_cart.tambah_item("Laptop Acer", 1200, 2)
        assert shopping_cart.keranjang[0] == {"produk": "Laptop Acer", "harga": 1200, "jumlah": 2, "total": 2400}

    @pytest.mark.regression
    def test_add_multiple_items_to_cart(self):
        shopping_cart = ShoppingCart("Juragan")
        shopping_cart.tambah_item("Laptop Acer", 1200, 2)
        shopping_cart.tambah_item("Monitor LG 19inch", 1500, 2)
        assert shopping_cart.keranjang[0] == {"produk": "Laptop Acer", "harga": 1200, "jumlah": 2, "total": 2400}
        assert shopping_cart.keranjang[1] == {"produk": "Monitor LG 19inch", "harga": 1500, "jumlah": 2, "total": 3000}

    @pytest.mark.negative
    def test_add_zero_quantity_item_to_cart(self):
        shopping_cart = ShoppingCart("Juragan")
        shopping_cart.tambah_item("Laptop Acer", 1200, 0)
        assert len(shopping_cart.keranjang) == 0

    @pytest.mark.negative
    def test_add_negative_price_item_to_cart(self):
        shopping_cart = ShoppingCart("Juragan")
        shopping_cart.tambah_item("Laptop Acer", -1200, 2)
        assert len(shopping_cart.keranjang) == 0
