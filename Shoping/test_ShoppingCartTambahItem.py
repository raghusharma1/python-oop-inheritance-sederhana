# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tambah_item_ab3c7163fb
ROOST_METHOD_SIG_HASH=tambah_item_86b63dc9da


Scenario 1: Adding a single item to the shopping cart
Details:
  TestName: test_add_single_item
  Description: This test is intended to verify that a single item can be added to the shopping cart and that all of the item's details are stored correctly.
Execution:
  Arrange: Initialize a ShoppingCart object with a given 'nama_pembeli'. Prepare a set of variables for 'produk', 'harga', and 'jumlah'.
  Act: Invoke the 'tambah_item' method on the ShoppingCart object, passing in the 'produk', 'harga', and 'jumlah' variables.
  Assert: Check that the ShoppingCart object's 'keranjang' list contains a single item, and that this item is a dictionary with the correct 'produk', 'harga', 'jumlah', and 'total' values.
Validation:
  This test ensures that the 'tambah_item' function is able to correctly add items to the shopping cart, which is fundamental to the business logic of the shopping cart system.

Scenario 2: Adding multiple items to the shopping cart
Details:
  TestName: test_add_multiple_items
  Description: This test is intended to verify that multiple items can be added to the shopping cart and that all of the items' details are stored correctly.
Execution:
  Arrange: Initialize a ShoppingCart object with a given 'nama_pembeli'. Prepare multiple sets of variables for 'produk', 'harga', and 'jumlah'.
  Act: Invoke the 'tambah_item' method on the ShoppingCart object multiple times, each time passing in a different set of 'produk', 'harga', and 'jumlah' variables.
  Assert: Check that the ShoppingCart object's 'keranjang' list contains the correct number of items, and that each item is a dictionary with the correct 'produk', 'harga', 'jumlah', and 'total' values.
Validation:
  This test ensures that the 'tambah_item' function is able to handle multiple items being added to the shopping cart, which is a common use case in a real-world shopping scenario.

Scenario 3: Adding an item with a quantity of zero to the shopping cart
Details:
  TestName: test_add_item_with_zero_quantity
  Description: This test is intended to verify that adding an item with a quantity of zero does not affect the contents of the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a given 'nama_pembeli'. Prepare a set of variables for 'produk', 'harga', and 'jumlah', with 'jumlah' set to zero.
  Act: Invoke the 'tambah_item' method on the ShoppingCart object, passing in the 'produk', 'harga', and 'jumlah' variables.
  Assert: Check that the ShoppingCart object's 'keranjang' list is still empty.
Validation:
  This test ensures that the 'tambah_item' function correctly handles the edge case of an item with a quantity of zero, which should not be added to the shopping cart.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTambahItem:

    def test_add_single_item(self):
        cart = ShoppingCart('Juragan')
        product = 'Laptop Acer'
        price = 1200
        quantity = 2
        cart.tambah_item(product, price, quantity)
        assert len(cart.keranjang) == 1
        assert cart.keranjang[0] == {'produk': product, 'harga': price, 'jumlah': quantity, 'total': price * quantity}

    def test_add_multiple_items(self):
        cart = ShoppingCart('Juragan')
        items = [('Laptop Acer', 1200, 2), ('Monitor LG 19inch', 1500, 2), ('Keyboard Logitech', 500, 1)]
        for item in items:
            cart.tambah_item(*item)
        assert len(cart.keranjang) == len(items)
        for i, item in enumerate(items):
            assert cart.keranjang[i] == {'produk': item[0], 'harga': item[1], 'jumlah': item[2], 'total': item[1] * item[2]}

    def test_add_item_with_zero_quantity(self):
        cart = ShoppingCart('Juragan')
        product = 'Laptop Acer'
        price = 1200
        quantity = 0
        cart.tambah_item(product, price, quantity)
        assert len(cart.keranjang) == 0
