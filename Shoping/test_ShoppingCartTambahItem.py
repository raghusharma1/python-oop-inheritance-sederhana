# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tambah_item_ab3c7163fb
ROOST_METHOD_SIG_HASH=tambah_item_86b63dc9da


```
Scenario 1: Adding a single item to the cart
Details:
  TestName: test_add_single_item
  Description: This test is intended to verify that an item can be successfully added to the cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a given nama_pembeli.
  Act: Call the tambah_item method on the ShoppingCart object, passing in a specific produk, harga, and jumlah.
  Assert: Check if the item has been added to the ShoppingCart object’s keranjang attribute correctly, with the correct total.
Validation:
  This test ensures the basic functionality of the tambah_item method, which is a fundamental part of the shopping cart system.

Scenario 2: Adding multiple items to the cart
Details:
  TestName: test_add_multiple_items
  Description: This test is intended to verify that multiple items can be successfully added to the cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a given nama_pembeli.
  Act: Call the tambah_item method on the ShoppingCart object multiple times, passing in different produk, harga, and jumlah each time.
  Assert: Check if all items have been added to the ShoppingCart object’s keranjang attribute correctly, each with the correct total.
Validation:
  This test ensures that the tambah_item method can handle multiple calls, which is essential for a functional shopping cart system.

Scenario 3: Attempting to add an item with a negative quantity
Details:
  TestName: test_add_item_negative_quantity
  Description: This test is intended to verify that the tambah_item method handles negative quantities correctly.
Execution:
  Arrange: Initialize a ShoppingCart object with a given nama_pembeli.
  Act: Call the tambah_item method on the ShoppingCart object, passing in a specific produk, harga, and a negative jumlah.
  Assert: Check if the method handles the negative quantity appropriately, such as by raising an error.
Validation:
  This test ensures that the tambah_item method has robust error handling, which is important for maintaining the integrity of the shopping cart’s data.

Scenario 4: Adding an item with a zero quantity
Details:
  TestName: test_add_item_zero_quantity
  Description: This test is intended to verify that the tambah_item method handles zero quantities correctly.
Execution:
  Arrange: Initialize a ShoppingCart object with a given nama_pembeli.
  Act: Call the tambah_item method on the ShoppingCart object, passing in a specific produk, harga, and a zero jumlah.
  Assert: Check if the method handles the zero quantity appropriately, such as by not adding the item to the cart.
Validation:
  This test ensures that the tambah_item method behaves logically when faced with edge cases, which is crucial for a reliable and user-friendly shopping cart system.
```
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTambahItem:

    @pytest.mark.regression
    def test_add_single_item(self):
        cart = ShoppingCart("Test")
        product = "Test Product"
        price = 100
        quantity = 1
        cart.tambah_item(product, price, quantity)
        assert cart.keranjang[0]['produk'] == product
        assert cart.keranjang[0]['harga'] == price
        assert cart.keranjang[0]['jumlah'] == quantity
        assert cart.keranjang[0]['total'] == price * quantity

    @pytest.mark.regression
    def test_add_multiple_items(self):
        cart = ShoppingCart("Test")
        products = [("Test Product 1", 100, 1), ("Test Product 2", 200, 2), ("Test Product 3", 300, 3)]
        for product, price, quantity in products:
            cart.tambah_item(product, price, quantity)
        for i, (product, price, quantity) in enumerate(products):
            assert cart.keranjang[i]['produk'] == product
            assert cart.keranjang[i]['harga'] == price
            assert cart.keranjang[i]['jumlah'] == quantity
            assert cart.keranjang[i]['total'] == price * quantity

    @pytest.mark.negative
    def test_add_item_negative_quantity(self):
        cart = ShoppingCart("Test")
        product = "Test Product"
        price = 100
        quantity = -1
        with pytest.raises(ValueError):
            cart.tambah_item(product, price, quantity)

    @pytest.mark.negative
    def test_add_item_zero_quantity(self):
        cart = ShoppingCart("Test")
        product = "Test Product"
        price = 100
        quantity = 0
        with pytest.raises(ValueError):
            cart.tambah_item(product, price, quantity)
