# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tambah_item_ab3c7163fb
ROOST_METHOD_SIG_HASH=tambah_item_86b63dc9da


Scenario 1: Addition of a single item to the shopping cart
Details:
  TestName: test_add_single_item
  Description: This test is intended to verify that the function tambah_item can correctly add a single item to the shopping cart.
Execution:
  Arrange: Create an instance of the ShoppingCart class with a given 'nama_pembeli'.
  Act: Call the 'tambah_item' method with appropriate 'produk', 'harga', and 'jumlah' parameters.
  Assert: Check that the 'keranjang' list of the ShoppingCart instance contains the added item with the correct details.
Validation:
  The ability to add items to the cart is a fundamental functionality of the ShoppingCart class. This test ensures that this function works correctly for single items.

Scenario 2: Addition of multiple items to the shopping cart
Details:
  TestName: test_add_multiple_items
  Description: This test is intended to verify that the function tambah_item can correctly add multiple items to the shopping cart.
Execution:
  Arrange: Create an instance of the ShoppingCart class with a given 'nama_pembeli'.
  Act: Call the 'tambah_item' method multiple times with different 'produk', 'harga', and 'jumlah' parameters.
  Assert: Check that the 'keranjang' list of the ShoppingCart instance contains all the added items with the correct details.
Validation:
  In a real-world scenario, a customer would typically add multiple items to the shopping cart. This test ensures the function can handle multiple additions.

Scenario 3: Calculation of the total cost for an item
Details:
  TestName: test_total_cost_calculation
  Description: This test is intended to verify that the function tambah_item correctly calculates the total cost for an item.
Execution:
  Arrange: Create an instance of the ShoppingCart class with a given 'nama_pembeli'.
  Act: Call the 'tambah_item' method with a 'produk', 'harga', and 'jumlah'.
  Assert: Check that the 'total' field of the added item in the 'keranjang' list is equal to the product of 'harga' and 'jumlah'.
Validation:
  The correct calculation of the total cost for each item is crucial for the checkout process. This test ensures that the function correctly implements this calculation.

Scenario 4: Handling of zero quantity for an item
Details:
  TestName: test_zero_quantity
  Description: This test is intended to verify that the function tambah_item handles an item with zero quantity correctly.
Execution:
  Arrange: Create an instance of the ShoppingCart class with a given 'nama_pembeli'.
  Act: Call the 'tambah_item' method with a 'produk', 'harga', and 'jumlah' of zero.
  Assert: Check that the 'total' field of the added item in the 'keranjang' list is zero.
Validation:
  Even though it may seem unusual to add an item with zero quantity to the cart, this scenario could occur in certain cases (e.g., a customer changes their mind after adding an item). This test ensures that the function can handle such cases correctly.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTambahItem:
    @pytest.mark.regression
    def test_add_single_item(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 2)
        assert len(cart.keranjang) == 1
        assert cart.keranjang[0]['produk'] == 'Laptop Acer'
        assert cart.keranjang[0]['harga'] == 1200
        assert cart.keranjang[0]['jumlah'] == 2
        assert cart.keranjang[0]['total'] == 2400

    @pytest.mark.regression
    def test_add_multiple_items(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.tambah_item('Monitor LG 19inch', 1500, 2)
        assert len(cart.keranjang) == 2
        assert cart.keranjang[0]['produk'] == 'Laptop Acer'
        assert cart.keranjang[1]['produk'] == 'Monitor LG 19inch'

    @pytest.mark.regression
    def test_total_cost_calculation(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 2)
        assert cart.keranjang[0]['total'] == 2400

    @pytest.mark.regression
    def test_zero_quantity(self):
        cart = ShoppingCart('Juragan')
        cart.tambah_item('Laptop Acer', 1200, 0)
        assert cart.keranjang[0]['total'] == 0
