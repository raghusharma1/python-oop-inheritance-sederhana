# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tambah_item_ab3c7163fb
ROOST_METHOD_SIG_HASH=tambah_item_86b63dc9da


Scenario 1: Adding an item to the shopping cart
Details:
  TestName: test_add_item_to_cart
  Description: This test will verify that the function tambah_item correctly adds a product, its price, quantity, and total to the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a buyer's name.
  Act: Invoke the tambah_item function with a product, price, and quantity.
  Assert: Check that the item has been added to the shopping cart with the correct product, price, quantity, and total.
Validation:
  This test is critical as it validates the basic functionality of the tambah_item function, which is to add items to the shopping cart. The expected result aligns with the function's specifications and business requirements.

Scenario 2: Adding multiple items to the shopping cart
Details:
  TestName: test_add_multiple_items_to_cart
  Description: This test will verify that the function tambah_item correctly adds multiple items to the shopping cart, each with their respective product, price, quantity, and total.
Execution:
  Arrange: Initialize a ShoppingCart object with a buyer's name.
  Act: Invoke the tambah_item function multiple times with different products, prices, and quantities.
  Assert: Check that all items have been added to the shopping cart with their correct product, price, quantity, and total.
Validation:
  This test is important as it checks the function's ability to handle multiple items, which is a common use case in a shopping scenario. The expected result aligns with the function's specifications and business requirements.

Scenario 3: Adding an item with zero quantity to the shopping cart
Details:
  TestName: test_add_zero_quantity_item_to_cart
  Description: This test will verify how the function tambah_item handles the case of adding an item with zero quantity to the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a buyer's name.
  Act: Invoke the tambah_item function with a product, price, and zero quantity.
  Assert: Check that the item has been added to the shopping cart with the correct product, price, zero quantity, and total.
Validation:
  This test is necessary as it evaluates the function's handling of edge cases, such as adding an item with zero quantity. The expected result aligns with the function's specifications and business requirements.

Scenario 4: Adding an item with negative quantity to the shopping cart
Details:
  TestName: test_add_negative_quantity_item_to_cart
  Description: This test will verify how the function tambah_item handles the case of adding an item with negative quantity to the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a buyer's name.
  Act: Invoke the tambah_item function with a product, price, and negative quantity.
  Assert: Check that the item has not been added to the shopping cart or an appropriate error message is returned.
Validation:
  This test is important as it checks the function's handling of invalid inputs, such as a negative quantity. The expected result aligns with the function's specifications and business requirements.
"""

# ********RoostGPT********
# Importing necessary libraries
import pytest
from Contoh import ShoppingCart

# Test class for ShoppingCart
class Test_ShoppingCartTambahItem:
    # Test for adding an item to the shopping cart
    @pytest.mark.regression
    def test_add_item_to_cart(self):
        # Arrange
        cart = ShoppingCart('Juragan')
        # Act
        cart.tambah_item('Laptop Acer', 1200, 2)
        # Assert
        assert cart.keranjang[0]['produk'] == 'Laptop Acer'
        assert cart.keranjang[0]['harga'] == 1200
        assert cart.keranjang[0]['jumlah'] == 2
        assert cart.keranjang[0]['total'] == 2400

    # Test for adding multiple items to the shopping cart
    @pytest.mark.regression
    def test_add_multiple_items_to_cart(self):
        # Arrange
        cart = ShoppingCart('Juragan')
        # Act
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.tambah_item('Monitor LG 19inch', 1500, 2)
        # Assert
        assert len(cart.keranjang) == 2
        assert cart.keranjang[0]['produk'] == 'Laptop Acer'
        assert cart.keranjang[1]['produk'] == 'Monitor LG 19inch'

    # Test for adding an item with zero quantity to the shopping cart
    @pytest.mark.regression
    def test_add_zero_quantity_item_to_cart(self):
        # Arrange
        cart = ShoppingCart('Juragan')
        # Act
        cart.tambah_item('Laptop Acer', 1200, 0)
        # Assert
        assert cart.keranjang[0]['produk'] == 'Laptop Acer'
        assert cart.keranjang[0]['jumlah'] == 0
        assert cart.keranjang[0]['total'] == 0

    # Test for adding an item with negative quantity to the shopping cart
    @pytest.mark.regression
    def test_add_negative_quantity_item_to_cart(self):
        # Arrange
        cart = ShoppingCart('Juragan')
        # Act
        with pytest.raises(ValueError):
            cart.tambah_item('Laptop Acer', 1200, -2)
        # Assert
        assert len(cart.keranjang) == 0
