# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tampil_keranjang_9a9ae624df
ROOST_METHOD_SIG_HASH=tampil_keranjang_91dda67794


Scenario 1: Test for empty shopping cart
Details:
  TestName: test_empty_cart
  Description: This test is intended to verify that the function can handle an empty shopping cart and display the appropriate messages.
Execution:
  Arrange: Initialize a shopping cart object with a given name and an empty cart.
  Act: Invoke the `tampil_keranjang` function without passing any parameters.
  Assert: Check if the total shopping amount returned by the function is zero and the message displayed is as expected.
Validation:
  It is important to test this scenario to make sure that the function can handle edge cases like an empty shopping cart without causing any errors and displays the appropriate message to the user.

Scenario 2: Test for single item in the shopping cart
Details:
  TestName: test_single_item_cart
  Description: This test is intended to verify that the function correctly calculates the total shopping amount and displays the details for a single item in the cart.
Execution:
  Arrange: Initialize a shopping cart object with a given name and a single item in the cart.
  Act: Invoke the `tampil_keranjang` function without passing any parameters.
  Assert: Check if the total shopping amount returned by the function is equal to the price of the single item and the item details are displayed correctly.
Validation:
  This scenario is important to test because it checks that the function correctly handles the simplest non-empty case, which is a cart with only one item.

Scenario 3: Test for multiple items in the shopping cart
Details:
  TestName: test_multiple_items_cart
  Description: This test is intended to verify that the function correctly calculates the total shopping amount and displays the details for multiple items in the cart.
Execution:
  Arrange: Initialize a shopping cart object with a given name and multiple items in the cart.
  Act: Invoke the `tampil_keranjang` function without passing any parameters.
  Assert: Check if the total shopping amount returned by the function is equal to the sum of the prices of all items and the details for each item are displayed correctly.
Validation:
  This scenario is important to test because it checks that the function correctly handles the case where the cart contains multiple items, which is the most common use case.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTampilKeranjang:

    def test_empty_cart(self):
        cart = ShoppingCart('Test User')
        total, message = cart.tampil_keranjang()
        assert total == 0, "Total shopping amount for empty cart should be 0"
        assert message == "Keranjang Belanjaan is empty", "Message for empty cart is incorrect"

    def test_single_item_cart(self):
        cart = ShoppingCart('Test User')
        cart.tambah_item('Laptop Acer', 1200, 1)
        total, message = cart.tampil_keranjang()
        assert total == 1200, "Total shopping amount for single item cart is incorrect"
        assert 'Laptop Acer' in message, "Item details are not correctly displayed for single item cart"

    def test_multiple_items_cart(self):
        cart = ShoppingCart('Test User')
        cart.tambah_item('Laptop Acer', 1200, 2)
        cart.tambah_item('Monitor LG 19inch', 1500, 2)
        total, message = cart.tampil_keranjang()
        assert total == 5400, "Total shopping amount for multiple items cart is incorrect"
        assert 'Laptop Acer' in message, "Item details are not correctly displayed for multiple items cart"
        assert 'Monitor LG 19inch' in message, "Item details are not correctly displayed for multiple items cart"
