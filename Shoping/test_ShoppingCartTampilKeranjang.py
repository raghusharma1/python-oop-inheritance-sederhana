# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tampil_keranjang_9a9ae624df
ROOST_METHOD_SIG_HASH=tampil_keranjang_91dda67794


Scenario 1: Test with an empty shopping cart
Details:
  TestName: test_tampil_keranjang_empty
  Description: This test is intended to verify the behavior of the function when the shopping cart is empty.
Execution:
  Arrange: Initialize a ShoppingCart object with a name but without any items in the cart.
  Act: Invoke the function tampil_keranjang with the ShoppingCart object.
  Assert: Check if the function prints the correct output, showing the buyer's name and a total purchase of 0.
Validation:
  This test is important to ensure that the function handles empty shopping carts correctly and does not crash or behave unexpectedly.

Scenario 2: Test with a shopping cart containing multiple items
Details:
  TestName: test_tampil_keranjang_multiple_items
  Description: This test is intended to verify the function's ability to correctly calculate and display the total cost of multiple items in the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a name and multiple items in the cart.
  Act: Invoke the function tampil_keranjang with the ShoppingCart object.
  Assert: Check if the function prints the correct output, showing the buyer's name, the details of each item, and the correct total purchase.
Validation:
  This test is important because calculating the total purchase correctly when multiple items are present is a key functionality of the function.

Scenario 3: Test with a shopping cart containing one item
Details:
  TestName: test_tampil_keranjang_single_item
  Description: This test is intended to verify the function's ability to correctly calculate and display the total cost when there is only one item in the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a name and one item in the cart.
  Act: Invoke the function tampil_keranjang with the ShoppingCart object.
  Assert: Check if the function prints the correct output, showing the buyer's name, the details of the item, and the correct total purchase.
Validation:
  This test is important to ensure that the function works correctly when there is only one item in the cart, as this is a common scenario.

Scenario 4: Test with a shopping cart containing items with different costs
Details:
  TestName: test_tampil_keranjang_different_costs
  Description: This test is intended to verify the function's ability to correctly calculate and display the total cost when the items in the shopping cart have different costs.
Execution:
  Arrange: Initialize a ShoppingCart object with a name and items with different costs in the cart.
  Act: Invoke the function tampil_keranjang with the ShoppingCart object.
  Assert: Check if the function prints the correct output, showing the buyer's name, the details of each item, and the correct total purchase.
Validation:
  This test is important to ensure that the function correctly handles items with different costs, as this is a common scenario in real-world shopping situations.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTampilKeranjang:
    @pytest.mark.regression
    def test_tampil_keranjang_empty(self):
        cart = ShoppingCart("John Doe")
        output = cart.tampil_keranjang()
        assert output == "\nDetail Keranjang\n------------------------\nPembeli : John Doe\nKeranjang Belanjaan\nTotal Belanja : 0"

    @pytest.mark.regression
    def test_tampil_keranjang_multiple_items(self):
        cart = ShoppingCart("John Doe")
        cart.tambah_item("Item1", 100, 2)
        cart.tambah_item("Item2", 200, 1)
        output = cart.tampil_keranjang()
        assert output == "\nDetail Keranjang\n------------------------\nPembeli : John Doe\nKeranjang Belanjaan\nItem1 : 2\nItem2 : 1\nTotal Belanja : 400"

    @pytest.mark.regression
    def test_tampil_keranjang_single_item(self):
        cart = ShoppingCart("John Doe")
        cart.tambah_item("Item1", 100, 2)
        output = cart.tampil_keranjang()
        assert output == "\nDetail Keranjang\n------------------------\nPembeli : John Doe\nKeranjang Belanjaan\nItem1 : 2\nTotal Belanja : 200"

    @pytest.mark.regression
    def test_tampil_keranjang_different_costs(self):
        cart = ShoppingCart("John Doe")
        cart.tambah_item("Item1", 100, 2)
        cart.tambah_item("Item2", 200, 1)
        output = cart.tampil_keranjang()
        assert output == "\nDetail Keranjang\n------------------------\nPembeli : John Doe\nKeranjang Belanjaan\nItem1 : 2\nItem2 : 1\nTotal Belanja : 400"
