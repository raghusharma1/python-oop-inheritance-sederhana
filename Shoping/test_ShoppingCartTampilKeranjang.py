# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tampil_keranjang_9a9ae624df
ROOST_METHOD_SIG_HASH=tampil_keranjang_91dda67794


Scenario 1: Test with an empty shopping cart
Details:
  TestName: test_empty_cart
  Description: This test is intended to verify the behavior of the function when the shopping cart is empty. The function should print the buyer's name and total shopping cost of 0.
Execution:
  Arrange: Initialize the ShoppingCart object with a name and an empty shopping cart.
  Act: Call the function tampil_keranjang with no parameters.
  Assert: Check the printed output to ensure the shopping cart is empty and the total shopping cost is 0.
Validation:
  It's important to test this scenario to ensure the function handles the edge case of an empty shopping cart correctly. 

Scenario 2: Test with a shopping cart containing multiple items
Details:
  TestName: test_multiple_items
  Description: This test is intended to verify the function's behavior when the shopping cart contains multiple items. The function should correctly calculate and display the total cost of all items in the cart.
Execution:
  Arrange: Initialize the ShoppingCart object with a name and a shopping cart containing multiple items.
  Act: Call the function tampil_keranjang with no parameters.
  Assert: Check the printed output to ensure it correctly displays the details of each item and the total shopping cost.
Validation:
  This test is essential to ensure that the function correctly handles the typical use case of a shopping cart with multiple items.

Scenario 3: Test the display of the buyer's name
Details:
  TestName: test_display_buyer_name
  Description: This test is intended to verify that the function correctly displays the buyer's name. 
Execution:
  Arrange: Initialize the ShoppingCart object with a name and any shopping cart.
  Act: Call the function tampil_keranjang with no parameters.
  Assert: Check the printed output to ensure it correctly displays the buyer's name.
Validation:
  This test is important for the personalization aspect of the shopping experience. The buyer's name should be correctly displayed to ensure a personalized shopping experience.

Scenario 4: Test the calculation of the total shopping cost
Details:
  TestName: test_calculate_total_cost
  Description: This test is intended to verify that the function correctly calculates the total cost of all items in the shopping cart.
Execution:
  Arrange: Initialize the ShoppingCart object with a name and a shopping cart containing items with known costs.
  Act: Call the function tampil_keranjang with no parameters.
  Assert: Check the printed output to ensure it correctly calculates and displays the total shopping cost.
Validation:
  This test is crucial to ensure the integrity of the shopping process. The total cost calculation should be accurate to avoid any potential financial discrepancies.
"""

# ********RoostGPT********
import pytest
from io import StringIO
import sys
from contoh import ShoppingCart

class Test_ShoppingCartTampilKeranjang:

    @pytest.mark.regression
    def test_empty_cart(self):
        # Redirect stdout to a buffer
        sys.stdout = StringIO()
        # Arrange
        cart = ShoppingCart("TestUser")
        # Act
        cart.tampil_keranjang()
        # Capture the output
        output = sys.stdout.getvalue()
        sys.stdout = sys.__stdout__
        # Assert
        assert "Pembeli : TestUser" in output
        assert "Total Belanja : 0" in output

    @pytest.mark.regression
    def test_multiple_items(self):
        # Redirect stdout to a buffer
        sys.stdout = StringIO()
        # Arrange
        cart = ShoppingCart("TestUser")
        cart.tambah_item("Item1", 100, 2)
        cart.tambah_item("Item2", 200, 1)
        # Act
        cart.tampil_keranjang()
        # Capture the output
        output = sys.stdout.getvalue()
        sys.stdout = sys.__stdout__
        # Assert
        assert "Pembeli : TestUser" in output
        assert "Item1" in output
        assert "Item2" in output
        assert "Total Belanja : 400" in output

    @pytest.mark.regression
    def test_display_buyer_name(self):
        # Redirect stdout to a buffer
        sys.stdout = StringIO()
        # Arrange
        cart = ShoppingCart("TestUser")
        # Act
        cart.tampil_keranjang()
        # Capture the output
        output = sys.stdout.getvalue()
        sys.stdout = sys.__stdout__
        # Assert
        assert "Pembeli : TestUser" in output

    @pytest.mark.regression
    def test_calculate_total_cost(self):
        # Redirect stdout to a buffer
        sys.stdout = StringIO()
        # Arrange
        cart = ShoppingCart("TestUser")
        cart.tambah_item("Item1", 100, 2)
        cart.tambah_item("Item2", 200, 1)
        # Act
        cart.tampil_keranjang()
        # Capture the output
        output = sys.stdout.getvalue()
        sys.stdout = sys.__stdout__
        # Assert
        assert "Total Belanja : 400" in output
