# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tampil_keranjang_9a9ae624df
ROOST_METHOD_SIG_HASH=tampil_keranjang_91dda67794


Scenario 1: Test the successful display of the shopping cart
Details:
  TestName: test_display_shopping_cart_success
  Description: This test will verify if the tampil_keranjang function successfully displays the shopping cart details including the buyer's name, the items in the cart and the total shopping cost.
Execution:
  Arrange: Initialize the ShoppingCart class with a buyer's name and add items to the shopping cart.
  Act: Call the tampil_keranjang function without any parameters.
  Assert: Check if the output includes the buyer's name, the items in the cart and the total shopping cost.
Validation:
  This test is important to ensure that the function tampil_keranjang is working as expected and displaying all the necessary details correctly.

Scenario 2: Test the display of the shopping cart with an empty cart
Details:
  TestName: test_display_shopping_cart_empty
  Description: This test will verify if the tampil_keranjang function successfully handles the scenario of an empty cart and does not throw any errors.
Execution:
  Arrange: Initialize the ShoppingCart class with a buyer's name without adding any items to the cart.
  Act: Call the tampil_keranjang function without any parameters.
  Assert: Check if the output includes the buyer's name and a message indicating that the cart is empty.
Validation:
  This test is crucial to ensure that the function tampil_keranjang can handle edge cases like an empty cart and still function correctly without throwing any errors.

Scenario 3: Test the calculation of the total shopping cost
Details:
  TestName: test_total_shopping_cost_calculation
  Description: This test will verify if the tampil_keranjang function correctly calculates the total shopping cost by summing up the total cost of all items in the cart.
Execution:
  Arrange: Initialize the ShoppingCart class with a buyer's name and add items to the cart with known total costs.
  Act: Call the tampil_keranjang function without any parameters.
  Assert: Check if the total shopping cost displayed matches the sum of the total costs of all items added to the cart.
Validation:
  This test is critical as it ensures the integrity of the total shopping cost calculation, which is a key requirement of the shopping cart functionality.
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTampilKeranjang:

    @pytest.mark.regression
    def test_display_shopping_cart_success(self):
        shopping_cart = ShoppingCart('Test Buyer')
        shopping_cart.tambah_item('Laptop Acer', 1200, 2)
        shopping_cart.tambah_item('Monitor LG 19inch', 1500, 2)
        output = shopping_cart.tampil_keranjang()
        assert 'Test Buyer' in output
        assert 'Laptop Acer' in output
        assert 'Monitor LG 19inch' in output
        assert 'Total Belanja : 5400' in output

    @pytest.mark.negative
    def test_display_shopping_cart_empty(self):
        shopping_cart = ShoppingCart('Test Buyer')
        output = shopping_cart.tampil_keranjang()
        assert 'Test Buyer' in output
        assert 'Keranjang Belanjaan' in output
        assert 'Total Belanja : 0' in output
        assert 'Keranjang belanjaan anda kosong' in output

    @pytest.mark.regression
    def test_total_shopping_cost_calculation(self):
        shopping_cart = ShoppingCart('Test Buyer')
        shopping_cart.tambah_item('Laptop Acer', 1200, 2)
        shopping_cart.tambah_item('Monitor LG 19inch', 1500, 2)
        output = shopping_cart.tampil_keranjang()
        assert 'Total Belanja : 5400' in output
