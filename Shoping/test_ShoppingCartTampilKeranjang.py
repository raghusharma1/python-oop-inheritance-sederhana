# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=tampil_keranjang_9a9ae624df
ROOST_METHOD_SIG_HASH=tampil_keranjang_91dda67794


```
Scenario 1: Validate the total shopping amount calculation
Details:
  TestName: test_total_shopping_amount_calculation
  Description: This test is intended to verify if the total shopping amount is calculated correctly. The total shopping amount should be the sum of the 'total' field of each item in the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a certain name and a predefined list of items in the shopping cart.
  Act: Invoke the tampil_keranjang method.
  Assert: The expected outcome is that the total shopping amount should match the sum of the 'total' field of each item in the shopping cart.
Validation:
  This test is important to ensure that the function calculates the total shopping amount correctly, which is crucial for correct billing and payment processing.

Scenario 2: Validate the correct display of shopping cart details
Details:
  TestName: test_display_of_shopping_cart_details
  Description: This test is intended to verify if the shopping cart details are displayed correctly. This includes the buyer's name and the details of each item in the shopping cart.
Execution:
  Arrange: Initialize a ShoppingCart object with a certain name and a predefined list of items in the shopping cart.
  Act: Invoke the tampil_keranjang method.
  Assert: The expected outcome is that the details of the shopping cart are displayed correctly, including the buyer's name and the details of each item in the shopping cart.
Validation:
  This test is important to ensure that the function displays the shopping cart details correctly, which is crucial for the buyer to review his/her purchases.

Scenario 3: Validate the behavior when the shopping cart is empty
Details:
  TestName: test_behavior_when_shopping_cart_is_empty
  Description: This test is intended to verify the behavior of the function when the shopping cart is empty. The function should still display the buyer's name and indicate that the shopping cart is empty.
Execution:
  Arrange: Initialize a ShoppingCart object with a certain name and an empty shopping cart.
  Act: Invoke the tampil_keranjang method.
  Assert: The expected outcome is that the function displays the buyer's name and indicates that the shopping cart is empty.
Validation:
  This test is important to ensure that the function handles the scenario of an empty shopping cart correctly, which is a valid scenario in a real-world shopping situation.
```
"""

# ********RoostGPT********
import pytest
from Contoh import ShoppingCart

class Test_ShoppingCartTampilKeranjang:

    @pytest.mark.regression
    def test_total_shopping_amount_calculation(self):
        # Arrange
        shopping_cart = ShoppingCart('John')
        shopping_cart.tambah_item('Item1', 500, 2)
        shopping_cart.tambah_item('Item2', 300, 3)
        
        # Act
        result = shopping_cart.tampil_keranjang()
        
        # Assert
        assert result == 1900, "The total shopping amount calculation is incorrect"

    @pytest.mark.regression
    def test_display_of_shopping_cart_details(self):
        # Arrange
        shopping_cart = ShoppingCart('John')
        shopping_cart.tambah_item('Item1', 500, 2)
        shopping_cart.tambah_item('Item2', 300, 3)
        
        # Act
        result = shopping_cart.tampil_keranjang()
        
        # Assert
        expected_output = "\nDetail Keranjang\n------------------------\nPembeli : John\nKeranjang Belanjaan\nItem1 : 1000\nItem2 : 900\nTotal Belanja : 1900"
        assert result == expected_output, "The display of shopping cart details is incorrect"

    @pytest.mark.regression
    def test_behavior_when_shopping_cart_is_empty(self):
        # Arrange
        shopping_cart = ShoppingCart('John')
        
        # Act
        result = shopping_cart.tampil_keranjang()
        
        # Assert
        expected_output = "\nDetail Keranjang\n------------------------\nPembeli : John\nKeranjang Belanjaan\nTotal Belanja : 0"
        assert result == expected_output, "The behavior when the shopping cart is empty is incorrect"
