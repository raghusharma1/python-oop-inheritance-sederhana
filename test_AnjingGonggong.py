# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_ebf15d5dfd
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


Scenario 1: Test gonggong method with 'Anjing' object
Details:
  TestName: test_gonggong_with_dog_object
  Description: This test is intended to verify the functionality of the gonggong method when invoked on an 'Anjing' object. 
Execution:
  Arrange: Initialize a 'Anjing' object.
  Act: Invoke the gonggong method on the 'Anjing' object.
  Assert: Check if the returned value is "woork".
Validation:
  This test is important to confirm that the gonggong method works correctly with 'Anjing' objects and the expected result aligns with the method's specifications. 

Scenario 2: Test gonggong method with 'Srigala' object
Details:
  TestName: test_gonggong_with_wolf_object
  Description: This test is intended to verify the functionality of the gonggong method when invoked on a 'Srigala' object. 
Execution:
  Arrange: Initialize a 'Srigala' object.
  Act: Invoke the gonggong method on the 'Srigala' object.
  Assert: Check if the returned value is not "woork".
Validation:
  This test is important to confirm that the gonggong method works differently with 'Srigala' objects and the expected result aligns with the method's specifications. 

Scenario 3: Test gonggong method with 'Singa' object
Details:
  TestName: test_gonggong_with_lion_object
  Description: This test is intended to verify the functionality of the gonggong method when invoked on a 'Singa' object. 
Execution:
  Arrange: Initialize a 'Singa' object.
  Act: Invoke the gonggong method on the 'Singa' object.
  Assert: Check if the returned value is not "woork".
Validation:
  This test is important to confirm that the gonggong method works differently with 'Singa' objects and the expected result aligns with the method's specifications.
"""

# ********RoostGPT********
import pytest
from cth2 import Anjing, Srigala, Singa

class Test_AnjingGonggong:

    def test_gonggong_with_dog_object(self):
        # Arrange
        dog = Anjing('Anjing')
        # Act
        result = dog.gonggong()
        # Assert
        assert result == "woork", "The gonggong method does not work correctly with 'Anjing' objects"

    def test_gonggong_with_wolf_object(self):
        # Arrange
        wolf = Srigala('Serigala')
        # Act
        result = wolf.gonggong()
        # Assert
        assert result != "woork", "The gonggong method does not work correctly with 'Srigala' objects"

    def test_gonggong_with_lion_object(self):
        # Arrange
        lion = Singa('Singa')
        # Act
        result = lion.gonggong()
        # Assert
        assert result != "woork", "The gonggong method does not work correctly with 'Singa' objects"
