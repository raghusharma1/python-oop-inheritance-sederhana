# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_ebf15d5dfd
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


Scenario 1: Test if the gonggong function correctly inherits from the parent class
Details:
  TestName: test_inheritance
  Description: This test verifies if the gonggong function of the Anjing class correctly inherits from its parent class.
Execution:
  Arrange: Create an instance of the Anjing class.
  Act: Call the gonggong function on the Anjing instance.
  Assert: Check if the returned value is "woork".
Validation:
  The test is important because it checks if the inheritance mechanism is correctly implemented. The expected result is "woork" because the gonggong function of Anjing class should return this value according to the business logic.

Scenario 2: Test the gonggong function with different object instances
Details:
  TestName: test_different_objects
  Description: This test verifies if the gonggong function behaves correctly when called on different instances of the Anjing class.
Execution:
  Arrange: Create instances of the Anjing class with different names.
  Act: Call the gonggong function on these instances.
  Assert: Check if the returned values are "woork" for all instances.
Validation:
  The test is crucial because it ensures that the function's behavior is consistent across different instances of the Anjing class. The expected result is "woork" for all instances, which aligns with the function's specifications.

Scenario 3: Test the gonggong function with other animal class instances
Details:
  TestName: test_other_animal_objects
  Description: This test verifies if the gonggong function behaves correctly when called on instances of other animal classes like Srigala and Singa.
Execution:
  Arrange: Create instances of the Srigala and Singa classes.
  Act: Call the gonggong function on these instances.
  Assert: Check if the function raises an AttributeError because the gonggong function is not defined for these classes.
Validation:
  This test is important as it checks the function's robustness when called on instances of other classes. According to the function's specifications and business logic, it should raise an AttributeError for instances of other classes.
"""

# ********RoostGPT********
import pytest
from cth2 import Anjing, Srigala, Singa

class Test_AnjingGonggong:

    @pytest.mark.regression
    def test_inheritance(self):
        dog = Anjing('Anjing')
        assert dog.gonggong() == "woork"

    @pytest.mark.regression
    def test_different_objects(self):
        dog1 = Anjing('Anjing1')
        dog2 = Anjing('Anjing2')
        dog3 = Anjing('Anjing3')
        assert dog1.gonggong() == "woork"
        assert dog2.gonggong() == "woork"
        assert dog3.gonggong() == "woork"

    @pytest.mark.negative
    def test_other_animal_objects(self):
        wolf = Srigala('Serigala')
        lion = Singa('Singa')
        with pytest.raises(AttributeError):
            wolf.gonggong()
        with pytest.raises(AttributeError):
            lion.gonggong()
