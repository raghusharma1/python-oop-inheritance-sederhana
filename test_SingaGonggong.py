# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_d14c8f8106
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


Scenario 1: Animal Roaring Test
Details:
  TestName: test_animal_roaring
  Description: This test is intended to verify that the gonggong function returns the correct roaring sound for each animal.
Execution:
  Arrange: Initialize objects for dog, wolf, and lion.
  Act: Invoke the gonggong function on each animal object.
  Assert: Check if the returned value is "Roaaarsss" for each animal.
Validation:
  It is important to ensure that the function returns the correct roaring sound for all animals. As per the function's specifications, it should return "Roaaarsss" irrespective of the animal type.

Scenario 2: Function Invocation without Object Initialization
Details:
  TestName: test_function_invocation_without_object
  Description: This test is intended to verify the behavior of the gonggong function when it is invoked without initializing an animal object.
Execution:
  Arrange: No setup is required as we are not initializing any animal object.
  Act: Invoke the gonggong function without initializing an animal object.
  Assert: Expect an error because an object is not initialized.
Validation:
  This test is important to ensure that the function is not invoked without initializing an animal object. As per the function's specifications and Python's OOP principles, an instance method like gonggong should be invoked on an object of the class.

Scenario 3: Changing the Roaring Sound
Details:
  TestName: test_changing_roar_sound
  Description: This test is intended to verify the behavior of the gonggong function when the roaring sound is changed.
Execution:
  Arrange: Initialize an animal object and change the return value of the gonggong function.
  Act: Invoke the gonggong function on the animal object.
  Assert: Check if the return value is the new roaring sound.
Validation:
  This test is important to ensure that the function is flexible and returns the updated roaring sound when it is changed. This meets the business requirement of being able to change the roaring sound of the animals.
"""

# ********RoostGPT********
import pytest
from cth2 import Anjing, Srigala, Singa

class Test_SingaGonggong:

    def test_animal_roaring(self):
        dog = Anjing('Anjing')
        wolf = Srigala('Serigala')
        lion = Singa('Singa')
        
        assert dog.gonggong() == "Roaaarsss"
        assert wolf.gonggong() == "Roaaarsss"
        assert lion.gonggong() == "Roaaarsss"

    def test_function_invocation_without_object(self):
        with pytest.raises(TypeError):
            Singa.gonggong()

    def test_changing_roar_sound(self, monkeypatch):
        def mock_gonggong(self):
            return "New Roar Sound"
        monkeypatch.setattr(Singa, 'gonggong', mock_gonggong)
        
        lion = Singa('Singa')
        assert lion.gonggong() == "New Roar Sound"
