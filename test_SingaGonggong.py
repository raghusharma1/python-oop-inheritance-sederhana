# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_d14c8f8106
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


Scenario 1: Test if the function 'gonggong' returns the correct string
Details:
  TestName: test_gonggong_returns_correct_string
  Description: This test is intended to verify if the function 'gonggong' returns the correct string "Roaaarsss".
Execution:
  Arrange: Initialize an object of the class with any string value for 'nama'.
  Act: Invoke the function 'gonggong' with no parameters.
  Assert: Check if the returned value is "Roaaarsss".
Validation:
  This test is important as it validates the basic functionality of the 'gonggong' function. The expected result, "Roaaarsss", is the hardcoded return value of the function, and thus, this test ensures that the function is working as expected.

Scenario 2: Test if the function 'gonggong' is invariant of the 'nama'
Details:
  TestName: test_gonggong_invariant_of_nama
  Description: This test is intended to verify if the function 'gonggong' return value is invariant of the 'nama' attribute of the object.
Execution:
  Arrange: Initialize two objects of the class with different string values for 'nama'.
  Act: Invoke the function 'gonggong' for both objects with no parameters.
  Assert: Check if the returned values for both invocations are "Roaaarsss".
Validation:
  This test is important as it validates that the 'gonggong' function's return value is not dependent on the 'nama' attribute of the object. This is based on the function's definition, which does not use the 'nama' attribute.

Scenario 3: Test if the function 'gonggong' returns a string
Details:
  TestName: test_gonggong_returns_string
  Description: This test is intended to verify if the function 'gonggong' always returns a string.
Execution:
  Arrange: Initialize an object of the class with any string value for 'nama'.
  Act: Invoke the function 'gonggong' with no parameters.
  Assert: Check if the returned value is a string.
Validation:
  This test is important as it validates the return type of the 'gonggong' function. As per the function's definition, it should always return a string. This test ensures that the function is working as per its specifications.
"""

# ********RoostGPT********
import pytest
from cth2 import Singa

class Test_SingaGonggong:
    
    @pytest.mark.regression
    def test_gonggong_returns_correct_string(self):
        singa = Singa('Simba')
        assert singa.gonggong() == "Roaaarsss", "Check if the returned value is 'Roaaarsss'"

    @pytest.mark.regression
    def test_gonggong_invariant_of_nama(self):
        singa1 = Singa('Simba')
        singa2 = Singa('Mufasa')
        assert singa1.gonggong() == "Roaaarsss", "Check if the returned value is 'Roaaarsss' for 'Simba'"
        assert singa2.gonggong() == "Roaaarsss", "Check if the returned value is 'Roaaarsss' for 'Mufasa'"

    @pytest.mark.regression
    def test_gonggong_returns_string(self):
        singa = Singa('Simba')
        assert isinstance(singa.gonggong(), str), "Check if the returned value is a string"
