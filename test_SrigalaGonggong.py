# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_6f137f8a1f
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


Scenario 1: Validate the gonggong method with a Dog object
Details:
  TestName: test_dog_gonggong
  Description: The test is intended to verify the behavior of the gonggong method when it is invoked on a Dog object. 
Execution:
  Arrange: Initialize a Dog object with the name 'Anjing'.
  Act: Invoke the gonggong method on the Dog object.
  Assert: The expected outcome is "hooooowll".
Validation:
  The test confirms that the gonggong method functions correctly when invoked on a Dog object, as the expected output aligns with the behavior defined in the method.

Scenario 2: Validate the gonggong method with a Wolf object
Details:
  TestName: test_wolf_gonggong
  Description: The test is intended to verify the behavior of the gonggong method when it is invoked on a Wolf object.
Execution:
  Arrange: Initialize a Wolf object with the name 'Serigala'.
  Act: Invoke the gonggong method on the Wolf object.
  Assert: The expected outcome is "hooooowll".
Validation:
  The test confirms that the gonggong method functions correctly when invoked on a Wolf object, as the expected output aligns with the behavior defined in the method.

Scenario 3: Validate the gonggong method with a Lion object
Details:
  TestName: test_lion_gonggong
  Description: The test is intended to verify the behavior of the gonggong method when it is invoked on a Lion object.
Execution:
  Arrange: Initialize a Lion object with the name 'Singa'.
  Act: Invoke the gonggong method on the Lion object.
  Assert: The expected outcome is "hooooowll".
Validation:
  The test confirms that even though a Lion is not typically known to 'howl', the gonggong method, as currently implemented, will return "hooooowll" when invoked on a Lion object. This might be a signal to review the business logic encapsulated in the method.
"""

# ********RoostGPT********
import pytest
from cth2 import Anjing, Srigala, Singa

class Test_SrigalaGonggong:

    @pytest.mark.regression
    def test_dog_gonggong(self):
        # Arrange
        dog = Anjing('Anjing')

        # Act
        result = dog.gonggong()

        # Assert
        assert result == "hooooowll", "The dog should howl"

    @pytest.mark.regression
    def test_wolf_gonggong(self):
        # Arrange
        wolf = Srigala('Serigala')

        # Act
        result = wolf.gonggong()

        # Assert
        assert result == "hooooowll", "The wolf should howl"

    @pytest.mark.regression
    def test_lion_gonggong(self):
        # Arrange
        lion = Singa('Singa')

        # Act
        result = lion.gonggong()

        # Assert
        assert result == "hooooowll", "The lion should howl, according to the current implementation"
