# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=gonggong_6f137f8a1f
ROOST_METHOD_SIG_HASH=gonggong_b704fd9060


```
Scenario 1: Validate the gonggong function for dog object
Details:
  TestName: test_dog_gonggong
  Description: This test is intended to verify the gonggong function when it is invoked by a dog object. The expected output should be "hooooowll".
Execution:
  Arrange: Initialize a dog object.
  Act: Invoke the gonggong function using the dog object.
  Assert: Check if the returned value is "hooooowll".
Validation:
  The test ensures that the gonggong function works correctly when invoked by a dog object. This is important as each animal may have a different sound, and we need to ensure that the function correctly outputs the sound for each animal.

Scenario 2: Validate the gonggong function for wolf object
Details:
  TestName: test_wolf_gonggong
  Description: This test is intended to verify the gonggong function when it is invoked by a wolf object. The expected output should be "hooooowll".
Execution:
  Arrange: Initialize a wolf object.
  Act: Invoke the gonggong function using the wolf object.
  Assert: Check if the returned value is "hooooowll".
Validation:
  The test ensures that the gonggong function works correctly when invoked by a wolf object. This is important as each animal may have a different sound, and we need to ensure that the function correctly outputs the sound for each animal.

Scenario 3: Validate the gonggong function for lion object
Details:
  TestName: test_lion_gonggong
  Description: This test is intended to verify the gonggong function when it is invoked by a lion object. The expected output should be "hooooowll".
Execution:
  Arrange: Initialize a lion object.
  Act: Invoke the gonggong function using the lion object.
  Assert: Check if the returned value is "hooooowll".
Validation:
  The test ensures that the gonggong function works correctly when invoked by a lion object. This is important as each animal may have a different sound, and we need to ensure that the function correctly outputs the sound for each animal.
```
Note: The expected output for all the animals is same ("hooooowll") based on the function definition. If the sound varies for each animal, the expected output in each test scenario should be updated accordingly.
"""

# ********RoostGPT********
import pytest
from cth2 import Srigala, Anjing, Singa

class Test_SrigalaGonggong:
    @pytest.mark.regression
    def test_dog_gonggong(self):
        # Arrange
        dog = Anjing('Anjing')

        # Act
        result = dog.gonggong()

        # Assert
        assert result == "hooooowll", f"For a dog object, expected 'hooooowll' but got {result}"

    @pytest.mark.regression
    def test_wolf_gonggong(self):
        # Arrange
        wolf = Srigala('Serigala')
        
        # Act
        result = wolf.gonggong()

        # Assert
        assert result == "hooooowll", f"For a wolf object, expected 'hooooowll' but got {result}"

    @pytest.mark.regression
    def test_lion_gonggong(self):
        # Arrange
        lion = Singa('Singa')

        # Act
        result = lion.gonggong()

        # Assert
        assert result == "hooooowll", f"For a lion object, expected 'hooooowll' but got {result}"
