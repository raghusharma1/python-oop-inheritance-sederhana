# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=diserang_1e2bc06655
ROOST_METHOD_SIG_HASH=diserang_606eb784c4


Scenario 1: Testing diserang function when serangan is greater than pertahanan
Details:
  TestName: test_diserang_greater_damage
  Description: This test is intended to verify the calculation of damage received when the serangan is greater than pertahanan. The damage received should be calculated as serangan divided by pertahanan.
Execution:
  Arrange: Initialize an object with a serangan value greater than the pertahanan value.
  Act: Invoke the diserang method with the pertahanan parameter.
  Assert: Check if the calculated damage is equal to the serangan divided by pertahanan.
Validation:
  This test is important to ensure that the method correctly calculates the damage when the serangan is greater than pertahanan, which is a core part of the game logic.

Scenario 2: Testing diserang function when serangan is less than pertahanan
Details:
  TestName: test_diserang_lower_damage
  Description: This test is intended to verify the calculation of damage received when the serangan is less than pertahanan. The damage received should be calculated as serangan divided by pertahanan.
Execution:
  Arrange: Initialize an object with a serangan value less than the pertahanan value.
  Act: Invoke the diserang method with the pertahanan parameter.
  Assert: Check if the calculated damage is equal to the serangan divided by pertahanan.
Validation:
  This test is important to ensure that the method correctly calculates the damage when the serangan is less than pertahanan, which is a core part of the game logic.

Scenario 3: Testing diserang function when darah after damage is positive
Details:
  TestName: test_diserang_positive_darah
  Description: This test is intended to verify the calculation of remaining darah after receiving damage. The remaining darah should be calculated as initial darah minus damage received.
Execution:
  Arrange: Initialize an object with a darah value greater than the damage received.
  Act: Invoke the diserang method with the pertahanan parameter.
  Assert: Check if the remaining darah is equal to the initial darah minus damage received.
Validation:
  This test is important to ensure that the method correctly calculates the remaining darah after receiving damage, which is a core part of the game logic.

Scenario 4: Testing diserang function when darah after damage is negative
Details:
  TestName: test_diserang_negative_darah
  Description: This test is intended to verify the calculation of remaining darah after receiving damage. The remaining darah should be calculated as initial darah minus damage received.
Execution:
  Arrange: Initialize an object with a darah value less than the damage received.
  Act: Invoke the diserang method with the pertahanan parameter.
  Assert: Check if the remaining darah is equal to the initial darah minus damage received.
Validation:
  This test is important to ensure that the method correctly calculates the remaining darah after receiving damage, which is a core part of the game logic.
"""

# ********RoostGPT********
import pytest
from Hy import tes

class Test_TesDiserang:
    @pytest.mark.regression
    def test_diserang_greater_damage(self):
        # Arrange
        obj = tes('test', 'enemy', 80, 10, 100)
        # Act
        obj.diserang(10)
        # Assert
        assert obj.darah == 100 - (80 // 10)

    @pytest.mark.regression
    def test_diserang_lower_damage(self):
        # Arrange
        obj = tes('test', 'enemy', 10, 80, 100)
        # Act
        obj.diserang(80)
        # Assert
        assert obj.darah == 100 - (10 // 80)

    @pytest.mark.regression
    def test_diserang_positive_darah(self):
        # Arrange
        obj = tes('test', 'enemy', 80, 10, 100)
        # Act
        obj.diserang(10)
        # Assert
        assert obj.darah == 100 - (80 // 10)

    @pytest.mark.regression
    def test_diserang_negative_darah(self):
        # Arrange
        obj = tes('test', 'enemy', 80, 10, 50)
        # Act
        obj.diserang(10)
        # Assert
        assert obj.darah == 50 - (80 // 10)
