# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=diserang_1e2bc06655
ROOST_METHOD_SIG_HASH=diserang_606eb784c4


Scenario 1: Test when the character has more health than the damage received
Details:
  TestName: test_diserang_damage_less_than_health
  Description: This test is intended to verify that the function correctly calculates the damage received and the remaining health when the damage is less than the current health.
Execution:
  Arrange: An instance of the character class is created with a specified health, attack, and defense values.
  Act: The diserang function is called with a specific defense value.
  Assert: Check if the remaining health is correctly calculated after the damage is received.
Validation:
  This test is important to ensure that the function correctly handles the scenario where the character takes damage but still has health remaining. The expected result is that the remaining health is correctly calculated, which is a key part of the game's combat mechanics.

Scenario 2: Test when the character has less health than the damage received
Details:
  TestName: test_diserang_damage_more_than_health
  Description: This test is intended to verify that the function correctly calculates the damage received and the remaining health when the damage is more than the current health.
Execution:
  Arrange: An instance of the character class is created with a specified health, attack, and defense values.
  Act: The diserang function is called with a specific defense value that will result in damage greater than the current health.
  Assert: Check if the remaining health is correctly calculated after the damage is received.
Validation:
  This test is important to ensure that the function correctly handles the scenario where the character is killed by the damage received. The expected result is that the remaining health is correctly calculated, which is a critical part of the game's combat mechanics.

Scenario 3: Test when the character has exactly the same health as the damage received
Details:
  TestName: test_diserang_damage_equals_health
  Description: This test is intended to verify that the function correctly calculates the damage received and the remaining health when the damage is exactly the same as the current health.
Execution:
  Arrange: An instance of the character class is created with a specified health, attack, and defense values.
  Act: The diserang function is called with a specific defense value that will result in damage exactly equal to the current health.
  Assert: Check if the remaining health is correctly calculated after the damage is received.
Validation:
  This test is important to ensure that the function correctly handles the scenario where the character is killed by the damage received. The expected result is that the remaining health is zero, which is a critical part of the game's combat mechanics.
"""

# ********RoostGPT********
import pytest
from hy import tes

class Test_TesDiserang:
    
    @pytest.mark.regression
    def test_diserang_damage_less_than_health(self):
        # Arrange
        python = tes('python', 'cobra', 80, 10, 100)
        cobra = tes('cobra', 'python', 85, 5, 100)
        
        # Act
        cobra.diserang(python)
        
        # Assert
        assert cobra.darah > 0, "Health should be more than 0 after attack"

    @pytest.mark.regression
    def test_diserang_damage_more_than_health(self):
        # Arrange
        python = tes('python', 'cobra', 80, 10, 100)
        cobra = tes('cobra', 'python', 1000, 5, 100)
        
        # Act
        cobra.diserang(python)
        
        # Assert
        assert cobra.darah <= 0, "Health should be less than or equal to 0 after attack"
        
    @pytest.mark.regression
    def test_diserang_damage_equals_health(self):
        # Arrange
        python = tes('python', 'cobra', 80, 10, 100)
        cobra = tes('cobra', 'python', 80, 1, 100)
        
        # Act
        cobra.diserang(python)
        
        # Assert
        assert cobra.darah == 0, "Health should be equal to 0 after attack"
