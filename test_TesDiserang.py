# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=diserang_1e2bc06655
ROOST_METHOD_SIG_HASH=diserang_606eb784c4


Scenario 1: Test when damage is greater than current health
Details:
  TestName: test_damage_greater_than_health
  Description: The test will verify the business logic of the 'diserang' function when the calculated damage is greater than the current health of the object.
Execution:
  Arrange: Initialize a 'tes' object with 'serangan' and 'pertahanan' such that the resultant damage (serangan//pertahanan) is greater than 'darah'.
  Act: Invoke the 'diserang' function on the initialized object.
  Assert: Check if the remaining health ('darah' - damage) is less than 0.
Validation:
  This test is important to ensure that the function can handle situations where the damage exceeds the current health of the object, which is a possible scenario in the business logic of a combat system.

Scenario 2: Test when damage is less than current health
Details:
  TestName: test_damage_less_than_health
  Description: The test will verify the business logic of the 'diserang' function when the calculated damage is less than the current health of the object.
Execution:
  Arrange: Initialize a 'tes' object with 'serangan' and 'pertahanan' such that the resultant damage (serangan//pertahanan) is less than 'darah'.
  Act: Invoke the 'diserang' function on the initialized object.
  Assert: Check if the remaining health ('darah' - damage) is greater than 0.
Validation:
  This test is crucial to confirm that the function correctly calculates and applies damage to the object's health, which is a fundamental part of the game's combat system.

Scenario 3: Test when damage equals current health
Details:
  TestName: test_damage_equals_health
  Description: The test will verify the business logic of the 'diserang' function when the calculated damage is equal to the current health of the object.
Execution:
  Arrange: Initialize a 'tes' object with 'serangan' and 'pertahanan' such that the resultant damage (serangan//pertahanan) equals 'darah'.
  Act: Invoke the 'diserang' function on the initialized object.
  Assert: Check if the remaining health ('darah' - damage) equals 0.
Validation:
  This test is important to ensure that the function can handle situations where the damage exactly matches the current health of the object, indicating a knockout in the combat system.
"""

# ********RoostGPT********
import pytest
from Hy import tes

class Test_TesDiserang:
    @pytest.mark.regression
    def test_damage_greater_than_health(self):
        # Arrange
        tes_obj = tes('python', 'cobra', 120, 10, 100)

        # Act
        tes_obj.diserang()

        # Assert
        assert tes_obj.darah - (tes_obj.serangan//tes_obj.pertahanan) < 0

    @pytest.mark.regression
    def test_damage_less_than_health(self):
        # Arrange
        tes_obj = tes('python', 'cobra', 80, 10, 100)

        # Act
        tes_obj.diserang()

        # Assert
        assert tes_obj.darah - (tes_obj.serangan//tes_obj.pertahanan) > 0

    @pytest.mark.regression
    def test_damage_equals_health(self):
        # Arrange
        tes_obj = tes('python', 'cobra', 100, 10, 100)

        # Act
        tes_obj.diserang()

        # Assert
        assert tes_obj.darah - (tes_obj.serangan//tes_obj.pertahanan) == 0
