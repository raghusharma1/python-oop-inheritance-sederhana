# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=__init___7b61ed4520
ROOST_METHOD_SIG_HASH=__init___972e891c1c


Scenario 1: Valid Initialization of the Object
Details:
  TestName: test_valid_object_initialization
  Description: This test is intended to verify the successful initialization of the object with the given parameters.
Execution:
  Arrange: Initialize the object with valid parameters. 
  Act: Invoke the __init__ method with parameters: 'python', 'cobra', 80, 10, 100.
  Assert: Check if the object's attributes are correctly set as per the given parameters.
Validation:
  This test is crucial to ensure that the objects are correctly initialized with the given parameters, which forms the base for the further business logic to work correctly.

Scenario 2: Object Initialization with Zero Health
Details:
  TestName: test_object_initialization_with_zero_health
  Description: This test is intended to verify the object's behavior when initialized with zero health.
Execution:
  Arrange: Initialize the object with health parameter as zero.
  Act: Invoke the __init__ method with parameters: 'python', 'cobra', 80, 10, 0.
  Assert: Check if the object's 'darah' attribute is set to zero.
Validation:
  This test is important to ensure that the object can handle zero health, which might be a valid scenario in a fight situation.

Scenario 3: Object Initialization with Zero Attack
Details:
  TestName: test_object_initialization_with_zero_attack
  Description: This test is intended to verify the object's behavior when initialized with zero attack.
Execution:
  Arrange: Initialize the object with attack parameter as zero.
  Act: Invoke the __init__ method with parameters: 'python', 'cobra', 0, 10, 100.
  Assert: Check if the object's 'serangan' attribute is set to zero.
Validation:
  This test is important to ensure that the object can handle zero attack, which might be a valid scenario in a fight situation.

Scenario 4: Object Initialization with Zero Defense
Details:
  TestName: test_object_initialization_with_zero_defense
  Description: This test is intended to verify the object's behavior when initialized with zero defense.
Execution:
  Arrange: Initialize the object with defense parameter as zero.
  Act: Invoke the __init__ method with parameters: 'python', 'cobra', 80, 0, 100.
  Assert: Check if the object's 'pertahanan' attribute is set to zero.
Validation:
  This test is important to ensure that the object can handle zero defense, which is a valid scenario and may affect the damage calculation logic. 

Scenario 5: Object Initialization with Empty Name
Details:
  TestName: test_object_initialization_with_empty_name
  Description: This test is intended to verify the object's behavior when initialized with an empty name.
Execution:
  Arrange: Initialize the object with name parameter as an empty string.
  Act: Invoke the __init__ method with parameters: '', 'cobra', 80, 10, 100.
  Assert: Check if the object's 'nama' attribute is set as an empty string.
Validation:
  This test is important to ensure that the object can handle an empty name, which might be a valid scenario in some situations.
"""

# ********RoostGPT********
import pytest
from Hy import tes

class Test_TesInit:
    def test_valid_object_initialization(self):
        obj = tes('python', 'cobra', 80, 10, 100)
        assert obj.nama == 'python'
        assert obj.lawan == 'cobra'
        assert obj.serangan == 80
        assert obj.pertahanan == 10
        assert obj.darah == 100

    def test_object_initialization_with_zero_health(self):
        obj = tes('python', 'cobra', 80, 10, 0)
        assert obj.darah == 0

    def test_object_initialization_with_zero_attack(self):
        obj = tes('python', 'cobra', 0, 10, 100)
        assert obj.serangan == 0

    def test_object_initialization_with_zero_defense(self):
        obj = tes('python', 'cobra', 80, 0, 100)
        assert obj.pertahanan == 0

    def test_object_initialization_with_empty_name(self):
        obj = tes('', 'cobra', 80, 10, 100)
        assert obj.nama == ''
