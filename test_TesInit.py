# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=__init___7b61ed4520
ROOST_METHOD_SIG_HASH=__init___972e891c1c


```
Scenario 1: Testing the correct initialization of the character object
Details:
  TestName: test_character_initialization
  Description: This test is intended to verify that the Character object is initialized correctly with the specified attributes.
Execution:
  Arrange: Create an instance of the Character class with all required parameters.
  Act: Create a new character with the name "Test", an opponent named "Opponent", an attack value of 10, a defense value of 5, and a blood value of 100.
  Assert: Check that the name, opponent, attack, defense, and blood values of the new character match the values passed in during initialization.
Validation:
  This test is important because it ensures that the Character object is initialized correctly, which is crucial for the correct operation of the rest of the class methods.

Scenario 2: Testing with negative values for attack, defense, and blood
Details:
  TestName: test_negative_values_initialization
  Description: This test is intended to verify that the Character object handles negative values for attack, defense, and blood correctly.
Execution:
  Arrange: Create an instance of the Character class with all required parameters, passing in negative values for attack, defense, and blood.
  Act: Create a new character with the name "Test", an opponent named "Opponent", an attack value of -10, a defense value of -5, and a blood value of -100.
  Assert: Check that the attack, defense, and blood values of the new character are either handled correctly or an appropriate error is thrown.
Validation:
  This test is important because it checks how the Character class handles unexpected or invalid input values. Depending on the business logic, negative values might be invalid and should therefore either be handled or result in an error.

Scenario 3: Testing with empty strings for name and opponent
Details:
  TestName: test_empty_string_initialization
  Description: This test is intended to verify that the Character object handles empty strings for the name and opponent correctly.
Execution:
  Arrange: Create an instance of the Character class with all required parameters, passing in empty strings for the name and opponent.
  Act: Create a new character with an empty name, an empty opponent, an attack value of 10, a defense value of 5, and a blood value of 100.
  Assert: Check that the name and opponent of the new character are either handled correctly or an appropriate error is thrown.
Validation:
  This test is important because it checks how the Character class handles unexpected or invalid input values. Depending on the business logic, empty strings might be invalid and should therefore either be handled or result in an error.
```
"""

# ********RoostGPT********
import pytest
from Hy import tes

class Test_TesInit:

    @pytest.mark.positive
    def test_character_initialization(self):
        # Arrange
        character = tes('Test', 'Opponent', 10, 5, 100)

        # Act
        # As the action is the initialization itself, there's no specific action here

        # Assert
        assert character.nama == 'Test'
        assert character.lawan == 'Opponent'
        assert character.serangan == 10
        assert character.pertahanan == 5
        assert character.darah == 100

    @pytest.mark.negative
    def test_negative_values_initialization(self):
        # Arrange
        # Here we expect an exception to be raised due to negative values
        with pytest.raises(Exception):
            character = tes('Test', 'Opponent', -10, -5, -100)

    @pytest.mark.negative
    def test_empty_string_initialization(self):
        # Arrange
        # Here we expect an exception to be raised due to empty strings
        with pytest.raises(Exception):
            character = tes('', '', 10, 5, 100)
