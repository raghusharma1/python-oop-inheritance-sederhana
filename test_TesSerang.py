# ********RoostGPT********
"""
Test generated by RoostGPT for test python-oop-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=serang_975ec6ce0d
ROOST_METHOD_SIG_HASH=serang_1b7ca934cc


Scenario 1: Test for correct damage calculation
Details:
  TestName: test_damage_calculation
  Description: This test is intended to verify that the damage calculation logic in the serang function is working correctly.
Execution:
  Arrange: Initialize an object of the class with specific values for serangan and pertahanan.
  Act: Invoke the serang function on the created object.
  Assert: Check that the damage value printed by the function is equal to the serangan value divided by the pertahanan value.
Validation:
  This test is important as it ensures that the business logic for calculating damage in the serang function is correctly implemented. The expected result is directly connected to the function's specifications and business requirements.

Scenario 2: Test for correct fight initiation
Details:
  TestName: test_fight_initiation
  Description: This test is intended to verify that the fight initiation logic in the serang function is working correctly.
Execution:
  Arrange: Initialize an object of the class with specific values for nama and lawan.
  Act: Invoke the serang function on the created object.
  Assert: Check that the fight initiation statement printed by the function is correct.
Validation:
  This test is important as it ensures that the business logic for initiating a fight in the serang function is correctly implemented. The expected result is directly connected to the function's specifications and business requirements.

Scenario 3: Test for correct damage output
Details:
  TestName: test_damage_output
  Description: This test is intended to verify that the damage output statement in the serang function is correct.
Execution:
  Arrange: Initialize an object of the class with specific values for serangan and pertahanan.
  Act: Invoke the serang function on the created object.
  Assert: Check that the damage output statement printed by the function is correct.
Validation:
  This test is important as it ensures that the business logic for outputting damage in the serang function is correctly implemented. The expected result is directly connected to the function's specifications and business requirements.
"""

# ********RoostGPT********
import pytest
from Hy import tes

class Test_TesSerang:

    @pytest.mark.regression
    def test_damage_calculation(self):
        # Arrange
        obj = tes('python', 'cobra', 80, 10, 100)
        expected_damage = obj.serangan // obj.pertahanan

        # Act
        result = obj.serang(obj.serangan)

        # Assert
        assert result == expected_damage, "Damage calculation is incorrect"

    @pytest.mark.regression
    def test_fight_initiation(self):
        # Arrange
        obj = tes('python', 'cobra', 80, 10, 100)
        expected_statement = f"{obj.nama} menyerang {obj.lawan}"

        # Act
        result = obj.serang(obj.serangan)

        # Assert
        assert result == expected_statement, "Fight initiation statement is incorrect"

    @pytest.mark.regression
    def test_damage_output(self):
        # Arrange
        obj = tes('python', 'cobra', 80, 10, 100)
        expected_damage = obj.serangan // obj.pertahanan
        expected_output = f"{expected_damage} damage yang di keluarkan"

        # Act
        result = obj.serang(obj.serangan)

        # Assert
        assert result == expected_output, "Damage output statement is incorrect"
